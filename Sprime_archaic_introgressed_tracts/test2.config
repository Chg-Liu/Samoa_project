//General parameters for nextflow execution:
process.executor = "slurm"
process.clusterOptions = '--requeue'
//SLURM general submission options:
executor {
   queueSize = 300
   submitRateLimit = '100/5min'
}

//Input parameters for the pipeline:
//Directory for final outputs:
params.run_name = "Sprime"
params.output_prefix = "/gpfs/gibbs/pi/tucci/cl2549/02_Samoa/preliminary_analysis/"
params.output_dir = "${params.output_prefix}/${params.run_name}"

//Glob for the per-chromosome VCFs:
params.vcf_glob = "${params.output_dir}/modern_VCFs/*.vcf.gz"
//Regex for parsing the chromosome out of the VCF name:
params.vcf_regex = ~/_chr(\p{Alnum}+)/

//Glob for the per-chromosome archaic VCFs:
params.arcvcf_glob = "${params.output_dir}/archaic_VCFs/*.vcf.gz"
//Path to metadata file for archaics:
params.arc_metadata_file = "${params.output_dir}/${params.run_name}_archaic_metadata.tsv"

//Path to freeze metadata file:
params.metadata_file = "${params.output_dir}/${params.run_name}_metadata.tsv"
//Include/filter expression to apply to input VCFs:
params.input_filter_str = 'FILTER="PASS"'
//Sample ID file for exclusion:
params.samples_to_exclude = "${params.output_dir}/${params.run_name}_samples_to_exclude.txt"

//Metadata structure information for Sprime sample selection:
//Sample ID column name in metadata file:
params.id_colname = "sample"
//Outgroup name to use:
params.sprime_outgroup_colname = "pop"
params.sprime_outgroup = "YRI"
//Target group column name:
params.sprime_target_colname = "pop"

//File listing Sprime target populations (one pop per line):
params.target_pops_file = "${params.output_dir}/${params.run_name}_Sprime_target_populations.txt"

//Debugging options:
trace {
   enabled = true
   fields = 'task_id,name,hash,status,exit,cpus,memory,time,submit,start,complete,duration,%cpu,%mem,peak_rss,workdir'
   file = "${params.output_dir}/${params.run_name}_Sprime_chrfixtest_nextflow_trace.txt"
   raw = true
   overwrite = true
}

//Reference-related parameters for the pipeline:
profiles {
   hs37d5 {
      //List of autosomes to use:
      params.autosomes = "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22"
      //Recombination rate maps to use:
      params.recmap_glob = "/gpfs/gibbs/pi/tucci/pfr8/genetic_maps/PLINK_forBeagle/GRCh37/plink.chr*.GRCh37.map"
      //Regex for parsing chromosome from rec map filenames:
      params.recmap_regex = ~/[.]chr(.+)[.]GRCh37[.]map$/
      //Annotation GFF to use:
      params.annotation_gff = "/gpfs/gibbs/pi/tucci/pfr8/refs/GENCODE/r38/gencode.v38lift37.annotation.gff3.gz"
   }

   GRCh38 {
      //List of autosomes to use:
      params.autosomes = "chr1,chr2,chr3,chr4,chr5,chr6,chr7,chr8,chr9,chr10,chr11,chr12,chr13,chr14,chr15,chr16,chr17,chr18,chr19,chr20,chr21,chr22"
      //Recombination rate maps to use:
      params.recmap_glob = "/gpfs/gibbs/pi/tucci/cl2549/02_Samoa/1KGtest/genetic_map/plink.chr*.GRCh38.map"
      //Regex for parsing chromosome from rec map filenames:
      params.recmap_regex = ~/[.]chr(.+)[.]GRCh38[.]map$/
      //Annotation GFF to use:
      params.annotation_gff = "/gpfs/gibbs/pi/tucci/pfr8/refs/GENCODE/r44/gencode.v44.chr_patch_hapl_scaff.annotation.gff3.gz"
   }

   farnam {
      params.mod_bcftools = "bcftools/1.10.2-119-g42942b4"
      params.mod_htslib = "htslib/1.10.2-131-g0456cec"
      params.mod_Sprime = "Sprime/07Dec18.5e2"
      params.mod_bedtools = "bedtools/2.29.2-41-g4ebba70"
      process.queue = 'pi_tucci,general'
   }

   ruddle {
      params.mod_bcftools = "bcftools/1eba45c"
      params.mod_htslib = "htslib/a1dec95"
      params.mod_Sprime = "Sprime/20May22.855"
      params.mod_bedtools = "bedtools/cc714eb"
   }

   mccleary {
      params.mod_bcftools = "BCFtools/1.16-GCCcore-10.2.0"
      params.mod_htslib = "HTSlib/1.16-GCCcore-10.2.0"
      params.mod_Sprime = "Sprime/20May22.855"
      params.mod_bedtools = "BEDTools/2.30.0-GCCcore-10.2.0"
   }
}

//SLURM submission parameters:
//Memory specified in GiB unless otherwise indicated
//VCF subsetting for Sprime
//Adds 8 GiB on retry
//Timeout to 24h on retry
//Max 1 retry
params.sprimesubset_cpus = 1
params.sprimesubset_mem = 1
params.sprimesubset_timeout = '2h'
params.sprimesubset_queue = 'day'
params.sprimesubset_long_queue = 'day'
//VCF concatenating for Sprime
//Adds 16 GiB on retry
//Timeout to 48h on retry
//Max 1 retry
params.concatvcf_cpus = 1
params.concatvcf_mem = 1
params.concatvcf_timeout = '3h'
params.concatvcf_queue = 'day'
params.concatvcf_long_queue = 'week'
//Sprime
//Adds 1 GiB for overhead automatically
//Adds 16 GiB on retry
//Timeout to 24h on retry
//Max 1 retry
params.sprime_cpus = 1
params.sprime_mem = 8
params.sprime_timeout = '2h'
params.sprime_queue = 'day'
params.sprime_long_queue = 'day'
//Sprime match rates
//Adds 16 GiB on retry
//Timeout to 24h on retry
//Max 1 retry
params.sprimematch_cpus = 1
params.sprimematch_mem = 1
params.sprimematch_timeout = '2h'
params.sprimematch_queue = 'day'
params.sprimematch_long_queue = 'day'
//Sprime projection
//Adds 16 GiB on retry
//Timeout to 24h on retry
//Max 1 retry
params.sprimeproject_cpus = 1
params.sprimeproject_mem = 1
params.sprimeproject_timeout = '2h'
params.sprimeproject_queue = 'day'
params.sprimeproject_long_queue = 'week'
params.sprimeproject_long_timeout = '96h'
//Sprime tract frequencies
//Adds 16 GiB on retry
//Timeout to 24h on retry
//Max 1 retry
params.sprimetf_cpus = 1
params.sprimetf_mem = 1
params.sprimetf_timeout = '6h'
params.sprimetf_queue = 'day'
params.sprimetf_long_queue = 'week'
params.sprimetf_long_timeout = '120h'
//Sprime tract gene lists
//Adds 16 GiB on retry
//Timeout to 24h on retry
//Max 1 retry
params.sprimegenes_cpus = 1
params.sprimegenes_mem = 5
params.sprimegenes_timeout = '1h'
params.sprimegenes_queue = 'day'
params.sprimegenes_long_queue = 'day'
//Combine outputs across targets
//Adds 16 GiB on retry
//Timeout to 24h on retry
//Max 1 retry
params.catouts_cpus = 1
params.catouts_mem = 1
params.catouts_timeout = '4h'
params.catouts_queue = 'day'
params.catouts_long_queue = 'day'
